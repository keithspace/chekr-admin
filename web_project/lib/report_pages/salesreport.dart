import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:open_file/open_file.dart';
import 'package:flutter/foundation.dart' show kIsWeb; // Import for kIsWeb
import 'dart:html' as html; // Web-specific import
import 'package:shared_preferences/shared_preferences.dart';

class SalesReportPage extends StatefulWidget {
  @override
  _SalesReportPageState createState() => _SalesReportPageState();
}

class _SalesReportPageState extends State<SalesReportPage> {
  List<Order> orders = [];
  String selectedPeriod = 'All Time';
  double totalAmount = 0.0;
  int totalOrders = 0;
  Map<String, int> paymentMethodCounts = {};
  Map<String, dynamic>? adminInfo; // To store admin information

  @override
  void initState() {
    super.initState();
    fetchOrders();
    fetchAdminInfo(); // Fetch admin information
  }

  // Fetch admin information from Firestore
  Future<void> fetchAdminInfo() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? adminId = prefs.getString('adminId'); // Retrieve stored admin ID

    if (adminId != null && adminId.isNotEmpty) {
      DocumentSnapshot adminSnapshot = await FirebaseFirestore.instance
          .collection('admins')
          .doc(adminId)
          .get();

      setState(() {
        adminInfo = adminSnapshot.data() as Map<String, dynamic>?;
      });
    } else {
      setState(() {
        adminInfo = {'name': 'Unknown', 'task': 'Unknown'};
      });
    }
  }

  void fetchOrders() async {
    QuerySnapshot querySnapshot;

    if (selectedPeriod == 'All Time') {
      querySnapshot =
      await FirebaseFirestore.instance.collection('orders').get();
    } else {
      DateTime now = DateTime.now();
      DateTime startDate;

      switch (selectedPeriod) {
        case 'Daily':
          startDate = DateTime(now.year, now.month, now.day);
          break;
        case 'Weekly':
          startDate = now.subtract(Duration(days: now.weekday - 1));
          break;
        case 'Monthly':
          startDate = DateTime(now.year, now.month, 1);
          break;
        default:
          startDate = DateTime(2000);
      }

      querySnapshot = await FirebaseFirestore.instance
          .collection('orders')
          .where('timestamp', isGreaterThan: startDate)
          .get();
    }

    orders = querySnapshot.docs.map((doc) {
      Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
      return Order(
        transactionId: data['transactionId'],
        amount: (data['amount'] ?? 0.0).toDouble(),
        paymentMode: data['paymentmode'],
        timestamp: (data['timestamp'] as Timestamp).toDate(),
      );
    }).toList();

    calculateTotals();
    calculatePaymentMethods();
    setState(() {});
  }

  void calculateTotals() {
    totalAmount = orders.fold(0, (sum, order) => sum + order.amount);
    totalOrders = orders.length;
  }

  void calculatePaymentMethods() {
    paymentMethodCounts.clear();
    for (var order in orders) {
      paymentMethodCounts[order.paymentMode] =
          (paymentMethodCounts[order.paymentMode] ?? 0) + 1;
    }
  }

  Future<void> generatePDF() async {
    final pdf = pw.Document();
    pdf.addPage(
      pw.Page(
        build: (pw.Context context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            // Header with admin and organization details
            pw.Text('Sales Report for $selectedPeriod',
                style:
                pw.TextStyle(fontSize: 24, fontWeight: pw.FontWeight.bold)),
            pw.SizedBox(height: 10),
            pw.Text('Generated on: ${DateTime.now().toString()}'),
            pw.SizedBox(height: 10),
            pw.Text(
                'Generated by: ${adminInfo?['name'] ?? 'N/A'} (${adminInfo?['task'] ?? 'N/A'})'),
            pw.SizedBox(height: 10),
            pw.Text('Organization: Chekr'),
            pw.SizedBox(height: 20),
            // Order details table
            pw.Table.fromTextArray(
              headers: [
                'Transaction ID',
                'Amount',
                'Payment Mode',
                'Date',
                'Time'
              ],
              data: orders.map((order) {
                String date =
                    '${order.timestamp.day.toString().padLeft(2, '0')}/${order.timestamp.month.toString().padLeft(2, '0')}/${order.timestamp.year}';
                String time =
                    '${order.timestamp.hour.toString().padLeft(2, '0')}:${order.timestamp.minute.toString().padLeft(2, '0')}:${order.timestamp.second.toString().padLeft(2, '0')}';
                return [
                  order.transactionId,
                  'KES ${order.amount.toStringAsFixed(2)}',
                  order.paymentMode,
                  date,
                  time,
                ];
              }).toList(),
            ),
            pw.SizedBox(height: 20),
            // Total amount and total orders
            pw.Text('Total Amount: KES ${totalAmount.toStringAsFixed(2)}',
                style: pw.TextStyle(fontSize: 18)),
            pw.Text('Total Orders: $totalOrders',
                style: pw.TextStyle(fontSize: 18)),
          ],
        ),
      ),
    );

    final pdfBytes = await pdf.save();

    if (kIsWeb) {
      // Web-specific download logic
      final blob = html.Blob([pdfBytes], 'application/pdf');
      final url = html.Url.createObjectUrlFromBlob(blob);
      final anchor = html.AnchorElement(href: url)
        ..setAttribute('download', 'sales_report.pdf')
        ..click();
      html.Url.revokeObjectUrl(url);
    } else {
      // Mobile-specific download logic
      final output = await getExternalStorageDirectory();
      final file = File("${output!.path}/sales_report.pdf");
      await file.writeAsBytes(pdfBytes);
      OpenFile.open(file.path);
    }
  }

  Future<void> generatePieChartPDF() async {
    final pdf = pw.Document();
    pdf.addPage(
      pw.Page(
        build: (pw.Context context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            // Header with admin and organization details
            pw.Text(
              'Payment Methods Report',
              style: pw.TextStyle(fontSize: 24, fontWeight: pw.FontWeight.bold),
            ),
            pw.SizedBox(height: 10),
            pw.Text('Generated on: ${DateTime.now().toString()}'),
            pw.SizedBox(height: 10),
            pw.Text(
              'Generated by: ${adminInfo?['name'] ?? 'N/A'} (${adminInfo?['task'] ?? 'N/A'})',
            ),
            pw.SizedBox(height: 10),
            pw.Text('Organization: Chekr'),
            pw.SizedBox(height: 20),
            // Pie chart representation
            pw.Text(
              'Payment Methods Distribution',
              style: pw.TextStyle(fontSize: 18, fontWeight: pw.FontWeight.bold),
            ),
            pw.SizedBox(height: 10),
            pw.Wrap(
              children: paymentMethodCounts.entries.map((entry) {
                return pw.Row(
                  mainAxisSize: pw.MainAxisSize.min,
                  children: [
                    pw.Container(
                      width: 12,
                      height: 12,
                      decoration: pw.BoxDecoration(
                        shape: pw.BoxShape.circle,
                        color: PdfColor.fromInt(_getPieColor(entry.key).value),
                      ),
                    ),
                    pw.SizedBox(width: 5),
                    pw.Text('${entry.key} (${entry.value})'),
                  ],
                );
              }).toList(),
            ),
          ],
        ),
      ),
    );

    final pdfBytes = await pdf.save();

    if (kIsWeb) {
      // Web-specific download logic
      final blob = html.Blob([pdfBytes], 'application/pdf');
      final url = html.Url.createObjectUrlFromBlob(blob);
      final anchor = html.AnchorElement(href: url)
        ..setAttribute('download', 'payment_methods_report.pdf')
        ..click();
      html.Url.revokeObjectUrl(url);
    } else {
      // Mobile-specific download logic
      final output = await getExternalStorageDirectory();
      final file = File("${output!.path}/payment_methods_report.pdf");
      await file.writeAsBytes(pdfBytes);
      OpenFile.open(file.path);
    }
  }

  @override
  Widget build(BuildContext context) {
    bool isMobile = MediaQuery.of(context).size.width < 800;

    return Scaffold(
      appBar: AppBar(title: Text('Sales Reports')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            DropdownButton<String>(
              value: selectedPeriod,
              items: ['All Time', 'Daily', 'Weekly', 'Monthly']
                  .map((value) =>
                  DropdownMenuItem(value: value, child: Text(value)))
                  .toList(),
              onChanged: (String? newValue) {
                setState(() {
                  selectedPeriod = newValue!;
                  fetchOrders();
                });
              },
            ),
            SizedBox(height: 10),
            Expanded(
              child: isMobile
                  ? Column(
                children: [
                  // Pie Chart (Top section on mobile)
                  Expanded(
                    flex: 1,
                    child: Card(
                      elevation: 4,
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          children: [
                            Text('Payment Methods',
                                style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold)),
                            SizedBox(height: 10),
                            Expanded(
                              child: PieChart(
                                PieChartData(
                                  sections: _generatePieChartSections(),
                                  sectionsSpace: 2,
                                  centerSpaceRadius: 30,
                                  borderData: FlBorderData(show: false),
                                ),
                              ),
                            ),
                            SizedBox(height: 10),
                            Wrap(
                              spacing: 10,
                              children:
                              paymentMethodCounts.entries.map((entry) {
                                return Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    Container(
                                      width: 12,
                                      height: 12,
                                      decoration: BoxDecoration(
                                        shape: BoxShape.circle,
                                        color: _getPieColor(entry.key),
                                      ),
                                    ),
                                    SizedBox(width: 5),
                                    Text('${entry.key} (${entry.value})'),
                                  ],
                                );
                              }).toList(),
                            ),
                            SizedBox(height: 10),
                            ElevatedButton(
                              onPressed: generatePieChartPDF,
                              child: Text('Download Pie Chart'),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                  SizedBox(height: 20),
                  // Orders Table (Bottom section on mobile)
                  Expanded(
                    flex: 2,
                    child: Card(
                      elevation: 4,
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Order Details',
                              style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold),
                            ),
                            SizedBox(height: 10),
                            Expanded(
                              child: SingleChildScrollView(
                                scrollDirection: Axis.vertical,
                                child: SingleChildScrollView(
                                  scrollDirection: Axis.horizontal,
                                  child: DataTable(
                                    columns: [
                                      DataColumn(
                                          label: Text('Transaction ID')),
                                      DataColumn(label: Text('Amount')),
                                      DataColumn(
                                          label: Text('Payment Mode')),
                                      DataColumn(label: Text('Date')),
                                      DataColumn(label: Text('Time')),
                                    ],
                                    rows: orders.map((order) {
                                      String date =
                                          '${order.timestamp.day.toString().padLeft(2, '0')}/${order.timestamp.month.toString().padLeft(2, '0')}/${order.timestamp.year}';
                                      String time =
                                          '${order.timestamp.hour.toString().padLeft(2, '0')}:${order.timestamp.minute.toString().padLeft(2, '0')}:${order.timestamp.second.toString().padLeft(2, '0')}';
                                      return DataRow(cells: [
                                        DataCell(
                                            Text(order.transactionId)),
                                        DataCell(Text(
                                            'KES ${order.amount.toStringAsFixed(2)}')),
                                        DataCell(Text(order.paymentMode)),
                                        DataCell(Text(date)),
                                        DataCell(Text(time)),
                                      ]);
                                    }).toList(),
                                  ),
                                ),
                              ),
                            ),
                            SizedBox(height: 10),
                            Text(
                              'Total Amount: KES ${totalAmount.toStringAsFixed(2)}',
                              style: TextStyle(fontSize: 16),
                            ),
                            Text(
                              'Total Orders: $totalOrders',
                              style: TextStyle(fontSize: 16),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ],
              )
                  : Row(
                children: [
                  // Pie Chart (Left side - 1/3 of screen)
                  Expanded(
                    flex: 1,
                    child: Card(
                      elevation: 4,
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          children: [
                            Text('Payment Methods',
                                style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold)),
                            SizedBox(height: 10),
                            Expanded(
                              child: PieChart(
                                PieChartData(
                                  sections: _generatePieChartSections(),
                                  sectionsSpace: 2,
                                  centerSpaceRadius: 30,
                                  borderData: FlBorderData(show: false),
                                ),
                              ),
                            ),
                            SizedBox(height: 10),
                            Wrap(
                              spacing: 10,
                              children:
                              paymentMethodCounts.entries.map((entry) {
                                return Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    Container(
                                      width: 12,
                                      height: 12,
                                      decoration: BoxDecoration(
                                        shape: BoxShape.circle,
                                        color: _getPieColor(entry.key),
                                      ),
                                    ),
                                    SizedBox(width: 5),
                                    Text('${entry.key} (${entry.value})'),
                                  ],
                                );
                              }).toList(),
                            ),
                            SizedBox(height: 10),
                            ElevatedButton(
                              onPressed: generatePieChartPDF,
                              child: Text('Download Pie Chart'),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                  SizedBox(width: 20),
                  // Orders Table (Right side - 2/3 of screen)
                  Expanded(
                    flex: 2,
                    child: Card(
                      elevation: 4,
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Order Details',
                              style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold),
                            ),
                            SizedBox(height: 10),
                            Expanded(
                              child: SingleChildScrollView(
                                scrollDirection: Axis.vertical,
                                child: SingleChildScrollView(
                                  scrollDirection: Axis.horizontal,
                                  child: DataTable(
                                    columns: [
                                      DataColumn(
                                          label: Text('Transaction ID')),
                                      DataColumn(label: Text('Amount')),
                                      DataColumn(
                                          label: Text('Payment Mode')),
                                      DataColumn(label: Text('Date')),
                                      DataColumn(label: Text('Time')),
                                    ],
                                    rows: orders.map((order) {
                                      String date =
                                          '${order.timestamp.day.toString().padLeft(2, '0')}/${order.timestamp.month.toString().padLeft(2, '0')}/${order.timestamp.year}';
                                      String time =
                                          '${order.timestamp.hour.toString().padLeft(2, '0')}:${order.timestamp.minute.toString().padLeft(2, '0')}:${order.timestamp.second.toString().padLeft(2, '0')}';
                                      return DataRow(cells: [
                                        DataCell(
                                            Text(order.transactionId)),
                                        DataCell(Text(
                                            'KES ${order.amount.toStringAsFixed(2)}')),
                                        DataCell(Text(order.paymentMode)),
                                        DataCell(Text(date)),
                                        DataCell(Text(time)),
                                      ]);
                                    }).toList(),
                                  ),
                                ),
                              ),
                            ),
                            SizedBox(height: 10),
                            Text(
                              'Total Amount: KES ${totalAmount.toStringAsFixed(2)}',
                              style: TextStyle(fontSize: 16),
                            ),
                            Text(
                              'Total Orders: $totalOrders',
                              style: TextStyle(fontSize: 16),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: generatePDF,
              child: Text('Download Report'),
            ),
          ],
        ),
      ),
    );
  }

  List<PieChartSectionData> _generatePieChartSections() {
    return paymentMethodCounts.entries.map((entry) {
      return PieChartSectionData(
        value: entry.value.toDouble(),
        title: entry.key,
        color: _getPieColor(entry.key),
        radius: 50,
      );
    }).toList();
  }

  Color _getPieColor(String method) {
    final colors = [
      Colors.blue,
      Colors.red,
      Colors.green,
      Colors.orange,
      Colors.purple
    ];
    return colors[
    paymentMethodCounts.keys.toList().indexOf(method) % colors.length];
  }
}

class Order {
  final String transactionId;
  final double amount;
  final String paymentMode;
  final DateTime timestamp;

  Order(
      {required this.transactionId,
        required this.amount,
        required this.paymentMode,
        required this.timestamp});
}
