import 'dart:typed_data';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'dart:html' as html;
import 'package:shared_preferences/shared_preferences.dart';

class StockProductReportPage extends StatefulWidget {
  @override
  _StockProductReportPageState createState() => _StockProductReportPageState();
}

class _StockProductReportPageState extends State<StockProductReportPage> {
  List<Product> products = [];
  List<Product> outOfStockProducts = [];
  Map<String, int> productSalesCount = {};
  int selectedIndex = 0;
  bool isLoading = true;
  Map<String, dynamic>? adminInfo;

  @override
  void initState() {
    super.initState();
    fetchProducts();
    fetchOrders();
    fetchAdminInfo();
  }

  Future<void> fetchAdminInfo() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? adminId = prefs.getString('adminId');
    if (adminId != null && adminId.isNotEmpty) {
      try {
        DocumentSnapshot adminSnapshot = await FirebaseFirestore.instance
            .collection('admins')
            .doc(adminId)
            .get();
        if (adminSnapshot.exists) {
          setState(() {
            adminInfo = adminSnapshot.data() as Map<String, dynamic>?;
          });
        }
      } catch (e) {
        print('Error fetching admin info: $e');
      }
    }
  }

  void fetchProducts() async {
    setState(() => isLoading = true);
    QuerySnapshot productSnapshot = await FirebaseFirestore.instance
        .collection('products')
        .orderBy('timeAdded', descending: true)
        .get();

    products = productSnapshot.docs.map((doc) {
      Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
      return Product(
        id: data['id'] ?? '',
        name: data['name'] ?? 'Unknown Product',
        quantity: data['quantity'] ?? 0,
        price: (data['price'] ?? 0.0).toDouble(),
        status: data['status'] ?? 'unknown',
        timeAdded: (data['timeAdded'] as Timestamp).toDate(),
      );
    }).toList();

    outOfStockProducts = products.where((product) => product.quantity == 0).toList();
    setState(() => isLoading = false);
  }

  void fetchOrders() async {
    QuerySnapshot orderSnapshot = await FirebaseFirestore.instance
        .collection('orders')
        .orderBy('timestamp', descending: true)
        .get();

    productSalesCount.clear();

    for (var orderDoc in orderSnapshot.docs) {
      Map<String, dynamic> orderData = orderDoc.data() as Map<String, dynamic>;
      List<dynamic> orderProducts = orderData['products'] ?? [];

      for (var orderProduct in orderProducts) {
        String productId = orderProduct['id'] ?? '';
        int quantity = (orderProduct['quantity'] as num?)?.toInt() ?? 0;
        productSalesCount[productId] = (productSalesCount[productId] ?? 0) + quantity;
      }
    }

    setState(() {});
  }

  Future<void> _downloadReportAsPdf() async {
    final pdf = pw.Document();

    pdf.addPage(
      pw.Page(
        build: (pw.Context context) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Text(
                selectedIndex == 0
                    ? 'Sales Report'
                    : selectedIndex == 1
                    ? 'Stock Levels Report'
                    : 'Out of Stock Report',
                style: pw.TextStyle(fontSize: 24, fontWeight: pw.FontWeight.bold),
              ),
              pw.SizedBox(height: 10),
              pw.Text('Chekr'),
              pw.SizedBox(height: 10),
              pw.Text('Generated by: ${adminInfo?['name'] ?? 'N/A'} (${adminInfo?['task'] ?? 'N/A'})'),
              pw.SizedBox(height: 10),
              pw.Text('Generated on: ${DateTime.now().toString()}'),
              pw.SizedBox(height: 20),
              if (selectedIndex == 0) _buildSalesReportPdf(),
              if (selectedIndex == 1) _buildStockLevelReportPdf(),
              if (selectedIndex == 2) _buildOutOfStockReportPdf(),
            ],
          );
        },
      ),
    );

    final Uint8List pdfBytes = await pdf.save();

    if (kIsWeb) {
      final blob = html.Blob([pdfBytes], 'application/pdf');
      final url = html.Url.createObjectUrlFromBlob(blob);
      final anchor = html.AnchorElement(href: url)
        ..setAttribute('download', 'report.pdf')
        ..click();
      html.Url.revokeObjectUrl(url);
    } else {
      await Printing.layoutPdf(
        onLayout: (PdfPageFormat format) async => pdfBytes,
      );
    }
  }

  pw.Widget _buildSalesReportPdf() {
    var sortedSales = productSalesCount.entries.toList()
      ..sort((a, b) => b.value.compareTo(a.value));

    return pw.Table.fromTextArray(
      headers: ['Product Name', 'Sales Count'],
      data: sortedSales.map((entry) {
        final product = products.firstWhere(
              (p) => p.id == entry.key,
          orElse: () => Product(
              id: '',
              name: 'Unknown',
              quantity: 0,
              price: 0.0,
              status: 'unknown',
              timeAdded: DateTime.now()),
        );
        return [product.name, entry.value.toString()];
      }).toList(),
    );
  }

  pw.Widget _buildStockLevelReportPdf() {
    var sortedProducts = [...products]..sort((a, b) => b.timeAdded.compareTo(a.timeAdded));

    return pw.Table.fromTextArray(
      headers: ['Product Name', 'Quantity', 'Price'],
      data: sortedProducts.map((product) {
        return [product.name, product.quantity.toString(), 'KES ${product.price.toStringAsFixed(2)}'];
      }).toList(),
    );
  }

  pw.Widget _buildOutOfStockReportPdf() {
    var sortedOutOfStock = [...outOfStockProducts]..sort((a, b) => b.timeAdded.compareTo(a.timeAdded));

    return pw.Table.fromTextArray(
      headers: ['Product Name', 'Price'],
      data: sortedOutOfStock.map((product) {
        return [product.name, 'KES ${product.price.toStringAsFixed(2)}'];
      }).toList(),
    );
  }

  @override
  Widget build(BuildContext context) {
    final ThemeData theme = Theme.of(context);
    final bool isDarkTheme = theme.brightness == Brightness.dark;

    if (isLoading) {
      return Center(child: CircularProgressIndicator());
    }

    return Scaffold(
      appBar: AppBar(
        title: Text('Stock/Product Reports', style: TextStyle(color: Colors.white)),
        backgroundColor: isDarkTheme ? Colors.grey[900] : Colors.blue,
        elevation: 0,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Toggle Buttons for Report Selection
            ToggleButtons(
              isSelected: [
                selectedIndex == 0,
                selectedIndex == 1,
                selectedIndex == 2
              ],
              onPressed: (int index) {
                setState(() => selectedIndex = index);
              },
              children: [
                Padding(
                  padding: EdgeInsets.all(8.0),
                  child: Row(
                    children: [
                      Icon(Icons.bar_chart, size: 20),
                      SizedBox(width: 8),
                      Text('Sales Report', style: TextStyle(fontSize: 16)),
                    ],
                  ),
                ),
                Padding(
                  padding: EdgeInsets.all(8.0),
                  child: Row(
                    children: [
                      Icon(Icons.inventory, size: 20),
                      SizedBox(width: 8),
                      Text('Stock Levels', style: TextStyle(fontSize: 16)),
                    ],
                  ),
                ),
                Padding(
                  padding: EdgeInsets.all(8.0),
                  child: Row(
                    children: [
                      Icon(Icons.warning, size: 20),
                      SizedBox(width: 8),
                      Text('Out of Stock', style: TextStyle(fontSize: 16)),
                    ],
                  ),
                ),
              ],
              color: isDarkTheme ? Colors.grey[600] : Colors.grey[800],
              selectedColor: Colors.white,
              fillColor: isDarkTheme ? Colors.grey[800] : Colors.blue,
              borderRadius: BorderRadius.circular(10),
            ),
            SizedBox(height: 20),
            // Main Content
            Expanded(
              child: Row(
                children: [
                  // Report Table
                  Expanded(
                    flex: 2,
                    child: selectedIndex == 0
                        ? buildSalesReport()
                        : selectedIndex == 1
                        ? buildStockLevelReport()
                        : buildOutOfStockReport(),
                  ),
                  SizedBox(width: 10),
                  // Top Selling Products List
                  Expanded(
                    flex: 1,
                    child: Card(
                      elevation: 5,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: Container(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [Colors.blue[50]!, Colors.white],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ),
                          borderRadius: BorderRadius.circular(10),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(12.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('Top 5 Fast-Selling Products',
                                  style: TextStyle(
                                      fontSize: 18, fontWeight: FontWeight.bold)),
                              Divider(),
                              ListView.separated(
                                shrinkWrap: true,
                                physics: NeverScrollableScrollPhysics(),
                                itemCount: (productSalesCount.entries.toList()
                                  ..sort((a, b) => b.value.compareTo(a.value)))
                                    .take(5)
                                    .length,
                                separatorBuilder: (context, index) => Divider(),
                                itemBuilder: (context, index) {
                                  var entry = (productSalesCount.entries.toList()
                                    ..sort((a, b) => b.value.compareTo(a.value)))
                                      .elementAt(index);
                                  final product = products.firstWhere(
                                        (p) => p.id == entry.key,
                                    orElse: () => Product(
                                        id: '',
                                        name: 'Unknown',
                                        quantity: 0,
                                        price: 0.0,
                                        status: 'unknown',
                                        timeAdded: DateTime.now()),
                                  );
                                  return ListTile(
                                    title: Text(product.name,
                                        style: TextStyle(fontSize: 14)),
                                    subtitle: Text('Sales: ${entry.value}',
                                        style: TextStyle(fontSize: 12)),
                                  );
                                },
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget buildSalesReport() {
    var sortedSales = productSalesCount.entries.toList()
      ..sort((a, b) => b.value.compareTo(a.value));

    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: DataTable(
        columns: const [
          DataColumn(label: Text('Product Name')),
          DataColumn(label: Text('Sales Count')),
        ],
        rows: sortedSales.map((entry) {
          final product = products.firstWhere(
                (p) => p.id == entry.key,
            orElse: () => Product(
                id: '',
                name: 'Unknown',
                quantity: 0,
                price: 0.0,
                status: 'unknown',
                timeAdded: DateTime.now()),
          );
          return DataRow(
            cells: [
              DataCell(Text(product.name)),
              DataCell(Text('${entry.value}')),
            ],
          );
        }).toList(),
      ),
    );
  }

  Widget buildStockLevelReport() {
    var sortedProducts = [...products]..sort((a, b) => b.timeAdded.compareTo(a.timeAdded));

    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: DataTable(
        columns: const [
          DataColumn(label: Text('Product Name')),
          DataColumn(label: Text('Quantity')),
          DataColumn(label: Text('Price')),
        ],
        rows: sortedProducts.map((product) {
          return DataRow(
            cells: [
              DataCell(Text(product.name)),
              DataCell(Text('${product.quantity}')),
              DataCell(Text('KES ${product.price.toStringAsFixed(2)}')),
            ],
          );
        }).toList(),
      ),
    );
  }

  Widget buildOutOfStockReport() {
    var sortedOutOfStock = [...outOfStockProducts]..sort((a, b) => b.timeAdded.compareTo(a.timeAdded));

    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: DataTable(
        columns: const [
          DataColumn(label: Text('Product Name')),
          DataColumn(label: Text('Price')),
        ],
        rows: sortedOutOfStock.map((product) {
          return DataRow(
            cells: [
              DataCell(Text(product.name)),
              DataCell(Text('KES ${product.price.toStringAsFixed(2)}')),
            ],
          );
        }).toList(),
      ),
    );
  }
}

class Product {
  final String id;
  final String name;
  final int quantity;
  final double price;
  final String status;
  final DateTime timeAdded;

  Product({
    required this.id,
    required this.name,
    required this.quantity,
    required this.price,
    required this.status,
    required this.timeAdded,
  });
}